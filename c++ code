
//memoization

/*
class Solution {
public:
    
   
    int solve(vector<vector<int>>& grid,vector<vector<int>>&dp,int i,int j){
        
        int a=INT_MAX;
       if(i<0 || j<0)return (a-1000);
        if(i==0 && j==0) return grid[0][0];
        
     if(dp[i][j]!=-1)return dp[i][j];
        
     
        int left = grid[i][j]+solve(grid,dp,i-1,j);
        int right = grid[i][j]+solve(grid,dp,i,j-1);
        
        return dp[i][j]=min(left,right);
        
        
    }
    
    
    
  int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        return solve(grid,dp ,m-1,n-1);
        
            
    }
    
    
};


*/
















// tabulation




class Solution {
public:


  int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
     dp[0][0]=grid[0][0];
      
      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
            
        if(i==0 && j==0)continue;
              
            int left=INT_MAX-1000,right=INT_MAX-1000;
              
         if(i>0) left =  grid[i][j] + dp[i-1][j];  
         if(j>0) right =  grid[i][j] + dp[i][j-1];
              
              dp[i][j]=min(left,right);              
          }
      }
      
     return dp[m-1][n-1]; 
        
            
    }
    
    
};

